#include<bits/stdc++.h>
using namespace std;

int check[30][30]={0};

int test(int x, int y) { // check the square(x,y) on the chessboard or not
	if((x<=8 && x>=1) && (y<=8 && y>=1)) return 1;
	else return 0;
}

void update(int i, int j, int value) { // add all the square the queen can capture by 1 when the queen is on the square(i,j)  
				      //and minus them by 1 when the queen is not on the square(i,j)
	for(int k=1; k<=8; k++) {
		if(test(i,k)==1) check[i][k] += value;
		if(test(k,j)==1) check[k][j] += value;
		
		if(test(i+k,j-k)) check[i+k][j-k] += value;
		if(test(i-k,j-k)) check[i-k][j-k] += value;
		if(test(i-k,j+k)) check[i-k][j+k] += value;
		if(test(i+k,j+k)) check[i+k][j+k] += value; 
	}		
}

void lietke(int row, int col, string sau) { // display all the ways we can set 8 queens on the chessboard.
	if(col>8) return;
	if(col==8) cout<<sau<<endl; // when we finish 8 column, we can print the way how we set it.
	
	for(int i=1; i<=8; i++) {
		if(check[i][col+1]==0) { // we need to check that whether this square is being captured or not.
			update(i,col+1,1); // add all the square that the queen can capture by 1.
			
			stringstream ss,ss1;
			ss << i;
			ss1 << (col+1);
			
			lietke(i, col+1,sau+ ss.str()+" " +ss1.str()+"\n"); // go to the square (i,col+1) on the next columns		
			update(i,col+1,-1); // minus all the squares the queen can capture when it is on the column (col+1)
			                    // by 1 because the queen will go to another square in the column (col+1).
		}
	}
}

int main() {
	lietke(0,0,"");
}


